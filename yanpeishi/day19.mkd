###中缀表达式
3 / 5 + 8

18 - 9 * （ 4 + 3 ）
运算符在操作数中间就是中缀表达式

###后缀表达式

3 5 / 8 +

18 9 4 3 + * -
这两个后缀是由上面的中缀转化而来，运算符在操作数后面就是后缀表达式

###中缀转为后缀
中缀转化为后缀的规则；把每个运算符都移到它的两个操作数的后面，然后删除所有的括号即可；

###后缀表达式的求值
将中缀表达式转换成等价的后缀表达式后，求值时，不需要再考虑运算符的优先级，只
需从左到右扫描一遍后缀表达式即可。具体求值步骤为：从左到右扫描后缀表达式，遇到运
算符就把表达式中该运算符前面两个操作数取出并运算，然后把结果带回后缀表达式；继续
扫描直到后缀表达式最后一个表达式。

###后缀表达式的求值的算法

设置一个栈，开始时栈为空，然后从左到右扫描后缀表达式，若遇操作数，则进栈；若
遇运算符，则从栈中退出两个元素，先退出的放到运算符的右边，后退出的放到运算符左边
，运算后的结果再进栈，直到后缀表达式扫描完毕。此时栈中仅有一个元素，即为运算的结
果。
      例如，求后缀表达式：1 2 + 8 2 - 7 4 - / * 的值，栈的变化如下。

|步骤|元素|说明|
|----|-----|----|
|1|1|1进栈|
|2|1 2|2进栈|
|3||遇+号退栈2和1|
|4|3|1+2=3的结果3进栈|
|5|3 8|8进栈|
|6|3 8 2|2进栈|
|7|3|遇-号退栈2和8|
|8|3 6|8-2=6的结果6进栈|
|9|3 6 7|7进栈|
|10|3 6 7 4|4进栈|
|11|3 6|遇-号退栈4和7|
|12|3 6 3|7-4=3的结果3进栈|
|13|3|遇/号退栈3和6|
|14|3 2|6/3=2的结果2进栈|
|15||遇*号退栈2和3|
|16|6|3*2=6进栈|
|17|6|扫描完毕运行结束|

###中缀表达式转换为后缀表达式的算法
遇到数字输出，（ 和 运算符 入栈 ， 当遇到） 时，出栈到上一个（，将运算符输出；

